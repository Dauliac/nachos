#ifdef CHANGED
#include "copyright.h"
#include "system.h"
#include "synchconsole.h"
#include "synch.h"
#include "machine.h"
static Semaphore *readAvail;
static Semaphore *writeDone;
static void ReadAvailHandler(void *arg) { (void) arg; readAvail->V(); }
static void WriteDoneHandler(void *arg) { (void) arg; writeDone->V(); }

static Semaphore *mutex_getChar;
static Semaphore *mutex_putChar;

SynchConsole::SynchConsole(const char *in, const char *out)
{
    readAvail = new Semaphore("read avail", 0);
    writeDone = new Semaphore("write done", 0);
    console = new Console (in, out, ReadAvailHandler, WriteDoneHandler, 0);
    machine = new Machine(TRUE);
    mutex_getChar = new Semaphore("PutChar", 1);
    mutex_putChar = new Semaphore("GetChar", 1);


}
SynchConsole::~SynchConsole()
{
    delete console;
    delete writeDone;
    delete readAvail;
}
void SynchConsole::SynchPutChar(int ch)
{
    mutex_putChar->P();
    console->PutChar(ch);
    writeDone->P();
    mutex_putChar->V();
}
int SynchConsole::SynchGetChar()
{
    // mutex_getChar->P();
    readAvail->P (); // wait for character to arrive
    int ch = (int)console->GetChar();
    // mutex_getChar->V();
    return ch;
}
void SynchConsole::SynchPutString(const char s[])
{
    int l = strlen(s);
    for(long i = 0; i < l; i++)
        SynchPutChar(s[i]);
}
void SynchConsole::SynchGetString(char *s, int n)
{
// ...
}

int SynchConsole::copyStringFromMachine(int from,char *to, unsigned int size)
{
    // size: size of string
    //
    //bool ReadMem(int addr, int size, int* value);
    // int buffer = size;
    // int out;
    // int i = 0;
    // for(from+i; i<size; i++)
    // {

    // }
    // machine->ReadMem(from, size, &out);
    // to = (char)out;

    unsigned int i;
    // buffer
    int character;
    for(i = 0; i < size - 1; i++) {
        // Readmem copy
        machine->ReadMem(from + i, 1, &character);

        if ((char)character == '\0') break;
        to[i] = (char)character;
    }
    to[i] = '\0';
    return i;
}

#endif // CHANGED
